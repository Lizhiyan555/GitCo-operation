Project Proposal: City Graffiti Tour Recording and Feedback System
	1. Introduction
		In this city tour project, we add a graffiti-themed recording and feedback system. Users can upload a few favorite photos taken at different graffiti spots, creating a unique electronic souvenir. The output includes a digital postcard created by merging the images and an audio file.

	2. Aim
	-Create Interactive Experience: Encourage users to upload their graffiti tour photos and receive personalized feedback.
	-Generate Personalized Souvenir: Users upload graffiti photos, which the system blends into one combined image (digital postcard) and generates an audio file that reflects the combined images.

	3. Functional Modules
	-Photo Upload Module
		Users take photos at different graffiti spots.
		Upload photos to the website system.
	-Postcard Generation Module
		The system automatically merges the uploaded photos to create a single image (postcard) that includes features from various graffiti spots.
	-Audio Generation Module
		The system uses the uploaded photos to create a unique audio file (music).
		The audio reflects the graffiti style and city atmosphere captured in the photos.
	-Souvenir Download and Sharing Module
		After users complete uploads, the system sends the combined postcard and audio file to their email or provides a download option.
		This creates a complete feedback process.

4. Implementation Plan
	-Tools
		Use Streamlit to build the interface, OpenCV/PIL for image processing, and PyAudio for audio generation.
	-Development Stage
		1.Photo Upload Module: Create the user interface with Streamlit to support multiple photo uploads, display, and confirmation.
		2.Postcard Generation: Use image generation AI to blend multiple images into one. Start with simple merging, then gradually add artistic effects.
		3.Audio Generation Module: Convert images to text, combine the texts, and transform this into an audio file that matches the photos.
		4.Souvenir Download and Sharing: Provide a download button for users to get their files and add an option to send files via email (optional).
	-Deployment
		1.Platform Deployment: Deploy the project to a suitable cloud platform (e.g., Streamlit Cloud or Heroku).
		2.Data and File Management: Set up file storage and caching to ensure system performance and efficient storage use.
	

项目提案：城市涂鸦漫游记录与反馈机制
一、Intro
在城市漫游项目中，引入涂鸦主题的城市漫游记录反馈机制。用户通过上传自己最喜欢的几张在涂鸦节点打卡的照片，生成独特的电子souvenir。Output结果包涵图片融合生成的明信片和音频。

二、Aim
	•	建立交互体验：鼓励用户通过上传参与城市漫游的打卡照片并获得个性化的反馈。
	•	生成个性化纪念品：用户提供涂鸦照片，从而将多个image融合生成的一个image（即电子明信片），以及通过多个image生成一个总和的音频。

三、功能模块
	1	用户照片上传模块
	◦	用户在不同涂鸦节点打卡拍照。
	◦	上传至网站系统。
	2	照片融合明信片生成模块
	◦	系统自动将上传的照片融合，生成一张包含不同节点特色的image（即明信片）。
	3	音频生成模块
	◦	系统根据用户上传照片生成的图像信息，生成一段特定音频（music）。
	◦	音频内容与用户拍摄的涂鸦风格和城市氛围匹配。
	4	电子纪念品发送模块
	◦	用户完成上传后，系统将融合生成的明信片和音频文件发送至用户邮箱或者直接供用户下载。
	◦	形成完整的反馈机制

 四、落地大致计划
	1	Tool
确定使用 Streamlit 搭建界面、OpenCV/PIL 实现图片处理，pyaudio 实现音频生成等
	2	开发阶段
	◦	搭建照片上传模块：通过 Streamlit 创建用户界面，支持照片多文件上传并进行展示和确认。
	◦	图片融合与明信片生成：使用图像生成ai，融合多个image。可先使用简单拼接，然后逐步增加艺术化处理。
	◦	音频生成模块：image to text, blend the text together, then text to audio，生成与照片匹配的音频文件。
	◦	纪念品下载与发送：提供下载按钮让用户获取文件，同时开发邮件发送功能（可选）。
	4	上线部署
	◦	平台部署：将项目部署在适合的云平台（如 Streamlit Cloud 或 Heroku）。
	◦	数据与文件管理：设置文件存储、缓存机制，确保系统性能和存储空间的有效利用。



Proposal 1
Project Name: Urban Graffiti Tour Recording & Feedback Mechanism
Objective
Develop a graffiti-themed urban tour recording and feedback system. Users upload three photos taken at graffiti spots around the city. These photos are then merged into one using Stable Diffusion, analyzed by AI for text generation, and an audio track is created based on the generated text. The final output displays the merged image along with a matching audio track for the user to download or receive via email.


1. Project Structure and Tool Selection
Primary Tools:
- Streamlit: For building the user interface, allowing photo upload and display.
- Stable Diffusion (diffusers library): For merging uploaded images into a single graffiti-styled image.
- Image Recognition and Text Generation (e.g., CLIP or a pre-trained image-captioning model): For generating a description based on the merged image.
- AudioLDM2Pipeline (from diffusers): To generate audio based on the generated description.
- pydub (optional): For audio mixing and sound enhancement.
- smtplib or SendGrid (optional): For sending digital souvenirs via email.
Main Modules:
1. User Photo Upload Module
2. Image Fusion and Text Generation Module
3. Audio Generation Module
4. Digital Souvenir Download and Sending Module

---
5. Detailed Implementation of Each Module
Module 1: User Photo Upload Module
Purpose: Allow users to upload exactly three photos taken at different graffiti spots, then preview them.
Steps:
1. Use Streamlit to create an upload interface that supports multiple file uploads.
2. Limit the upload count to exactly three images and display these for user confirmation.
Example Code:
import streamlit as st
from PIL import Image

Photo upload
uploaded_files = st.file_uploader("Upload exactly 3 graffiti photos", accept_multiple_files=True, type=['jpg', 'jpeg', 'png'])

if uploaded_files and len(uploaded_files) == 3:
    st.write("Preview of uploaded images:")
    images = [Image.open(file) for file in uploaded_files]for img in images:
        st.image(img, caption="Uploaded Photo")
else:
    st.warning("Please upload exactly 3 images.")
Module 2: Image Fusion and Text Generation Module
Purpose: Merge the three uploaded images into one using Stable Diffusion, then generate a text description for this image.
Steps:
1. Image Fusion: Concatenate the three images using PIL, then pass them through Stable Diffusion for style fusion.
2. Text Generation: Use an image-captioning model to generate a description for the merged image, which will be used as the prompt for audio generation.
Example Code:
from PIL import Image
from diffusers import StableDiffusionPipeline
import torch

Merge images and create a graffiti-style imagedef merge_and_style_images(images, prompt="graffiti style, urban street art"):
    widths, heights = zip(*(img.size for img in images))
    total_width = sum(widths)
    max_height = max(heights)
    combined_image = Image.new('RGB', (total_width, max_height))
    x_offset = 0for img in images:
        combined_image.paste(img, (x_offset, 0))
        x_offset += img.width
Initialize Stable Diffusion for style transfer
    pipeline = StableDiffusionPipeline.from_pretrained("CompVis/stable-diffusion-v1-4", torch_dtype=torch.float16)
    pipeline = pipeline.to("cuda")
    styled_image = pipeline(prompt=prompt, init_image=combined_image, strength=0.75, guidance_scale=7.5).images[0]
    styled_image.save("styled_postcard.jpg")return styled_image
styled_image = merge_and_style_images(images)

Image captioning for generating a descriptive textfrom transformers import pipeline as hf_pipeline
caption_generator = hf_pipeline("image-captioning")
description = caption_generator(styled_image)[0]['caption']
Module 3: Audio Generation Module
Purpose: Generate an audio track based on the description generated from the merged image.
Steps:
1. Use the generated description text as input for AudioLDM2Pipeline to create graffiti-style audio reflecting the atmosphere.
Example Code:
from diffusers import AudioLDM2Pipeline
import soundfile as sf

Generate audio from descriptiondef generate_audio_from_text(description):
    audio_pipeline = AudioLDM2Pipeline.from_pretrained("cvssp/audioldm2", torch_dtype=torch.float16)
    audio_pipeline = audio_pipeline.to("cuda")
    audio_array = audio_pipeline(prompt=description).audios[0]
    sf.write("generated_audio.wav", audio_array, samplerate=16000)  Save audioreturn "generated_audio.wav"
audio_file_path = generate_audio_from_text(description)
Module 4: Digital Souvenir Download and Sending Module
Purpose: Allow users to download or receive via email the final postcard and audio.
Steps:
1. Use Streamlit to create download buttons for both the merged image and audio.
2. Optionally, send the files via email using smtplib or an email API such as SendGrid.
Example Code:
import streamlit as st
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders

Download buttons for postcard and audio
st.download_button("Download your postcard", data=open("styled_postcard.jpg", "rb").read(), file_name="postcard.jpg")
st.download_button("Download your audio", data=open(audio_file_path, "rb").read(), file_name="audio.wav")

Email sending function (optional)def send_email_with_attachments(email_address, image_path, audio_path):
    msg = MIMEMultipart()
    msg['From'] = 'your_email@example.com'
    msg['To'] = email_address
    msg['Subject'] = "Your Souvenir from the Graffiti Tour"Attach imagewith open(image_path, "rb") as img_file:
        img = MIMEBase('application', 'octet-stream')
        img.set_payload(img_file.read())
        encoders.encode_base64(img)
        img.add_header('Content-Disposition', f'attachment; filename="postcard.jpg"')
        msg.attach(img)
    Attach audiowith open(audio_path, "rb") as audio_file:
        audio = MIMEBase('application', 'octet-stream')
        audio.set_payload(audio_file.read())
        encoders.encode_base64(audio)
        audio.add_header('Content-Disposition', f'attachment; filename="audio.wav"')
        msg.attach(audio)
Send emailwith smtplib.SMTP('smtp.example.com', 587) as server:
        server.login('your_email@example.com', 'password')
        server.sendmail(msg['From'], msg['To'], msg.as_string())

---
3. Deployment Plan
Deployment Steps
1. Prepare Project Environment: Set up a requirements.txt file with all dependencies.
2. Choose Deployment Platform:
  - Streamlit Cloud: For quickly deploying Streamlit apps.
  - Heroku or AWS EC2: For applications that require more resources.
3. File Storage:
  - Local storage for temporary files during development.
  - Cloud storage (like AWS S3) for production, particularly if you anticipate high usage.
